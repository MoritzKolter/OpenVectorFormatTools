// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ovf_lut.proto

#include "ovf_lut.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace open_vector_format {
constexpr JobLUT::JobLUT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workplanepositions_()
  , _workplanepositions_cached_byte_size_(0)
  , jobshellposition_(int64_t{0}){}
struct JobLUTDefaultTypeInternal {
  constexpr JobLUTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JobLUTDefaultTypeInternal() {}
  union {
    JobLUT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JobLUTDefaultTypeInternal _JobLUT_default_instance_;
constexpr WorkPlaneLUT::WorkPlaneLUT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vectorblockspositions_()
  , _vectorblockspositions_cached_byte_size_(0)
  , workplaneshellposition_(int64_t{0}){}
struct WorkPlaneLUTDefaultTypeInternal {
  constexpr WorkPlaneLUTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkPlaneLUTDefaultTypeInternal() {}
  union {
    WorkPlaneLUT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkPlaneLUTDefaultTypeInternal _WorkPlaneLUT_default_instance_;
}  // namespace open_vector_format
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ovf_5flut_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ovf_5flut_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ovf_5flut_2eproto = nullptr;

const uint32_t TableStruct_ovf_5flut_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::JobLUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::JobLUT, jobshellposition_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::JobLUT, workplanepositions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlaneLUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlaneLUT, workplaneshellposition_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlaneLUT, vectorblockspositions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::open_vector_format::JobLUT)},
  { 8, -1, -1, sizeof(::open_vector_format::WorkPlaneLUT)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_JobLUT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_WorkPlaneLUT_default_instance_),
};

const char descriptor_table_protodef_ovf_5flut_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rovf_lut.proto\022\022open_vector_format\">\n\006J"
  "obLUT\022\030\n\020jobShellPosition\030\001 \001(\003\022\032\n\022workP"
  "lanePositions\030\002 \003(\003\"M\n\014WorkPlaneLUT\022\036\n\026w"
  "orkPlaneShellPosition\030\001 \001(\003\022\035\n\025vectorBlo"
  "cksPositions\030\002 \003(\003B=Z;github.com/digital"
  "-production-aachen/openvectorformat/prot"
  "ob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ovf_5flut_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ovf_5flut_2eproto = {
  false, false, 249, descriptor_table_protodef_ovf_5flut_2eproto, "ovf_lut.proto", 
  &descriptor_table_ovf_5flut_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_ovf_5flut_2eproto::offsets,
  file_level_metadata_ovf_5flut_2eproto, file_level_enum_descriptors_ovf_5flut_2eproto, file_level_service_descriptors_ovf_5flut_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ovf_5flut_2eproto_getter() {
  return &descriptor_table_ovf_5flut_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ovf_5flut_2eproto(&descriptor_table_ovf_5flut_2eproto);
namespace open_vector_format {

// ===================================================================

class JobLUT::_Internal {
 public:
};

JobLUT::JobLUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  workplanepositions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:open_vector_format.JobLUT)
}
JobLUT::JobLUT(const JobLUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      workplanepositions_(from.workplanepositions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  jobshellposition_ = from.jobshellposition_;
  // @@protoc_insertion_point(copy_constructor:open_vector_format.JobLUT)
}

inline void JobLUT::SharedCtor() {
jobshellposition_ = int64_t{0};
}

JobLUT::~JobLUT() {
  // @@protoc_insertion_point(destructor:open_vector_format.JobLUT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JobLUT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JobLUT::ArenaDtor(void* object) {
  JobLUT* _this = reinterpret_cast< JobLUT* >(object);
  (void)_this;
}
void JobLUT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JobLUT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JobLUT::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.JobLUT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workplanepositions_.Clear();
  jobshellposition_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobLUT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 jobShellPosition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          jobshellposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 workPlanePositions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_workplanepositions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_workplanepositions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JobLUT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.JobLUT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 jobShellPosition = 1;
  if (this->_internal_jobshellposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_jobshellposition(), target);
  }

  // repeated int64 workPlanePositions = 2;
  {
    int byte_size = _workplanepositions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_workplanepositions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.JobLUT)
  return target;
}

size_t JobLUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.JobLUT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 workPlanePositions = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->workplanepositions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _workplanepositions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 jobShellPosition = 1;
  if (this->_internal_jobshellposition() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_jobshellposition());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JobLUT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JobLUT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JobLUT::GetClassData() const { return &_class_data_; }

void JobLUT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JobLUT *>(to)->MergeFrom(
      static_cast<const JobLUT &>(from));
}


void JobLUT::MergeFrom(const JobLUT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.JobLUT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  workplanepositions_.MergeFrom(from.workplanepositions_);
  if (from._internal_jobshellposition() != 0) {
    _internal_set_jobshellposition(from._internal_jobshellposition());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JobLUT::CopyFrom(const JobLUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.JobLUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobLUT::IsInitialized() const {
  return true;
}

void JobLUT::InternalSwap(JobLUT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  workplanepositions_.InternalSwap(&other->workplanepositions_);
  swap(jobshellposition_, other->jobshellposition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobLUT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ovf_5flut_2eproto_getter, &descriptor_table_ovf_5flut_2eproto_once,
      file_level_metadata_ovf_5flut_2eproto[0]);
}

// ===================================================================

class WorkPlaneLUT::_Internal {
 public:
};

WorkPlaneLUT::WorkPlaneLUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vectorblockspositions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:open_vector_format.WorkPlaneLUT)
}
WorkPlaneLUT::WorkPlaneLUT(const WorkPlaneLUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vectorblockspositions_(from.vectorblockspositions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workplaneshellposition_ = from.workplaneshellposition_;
  // @@protoc_insertion_point(copy_constructor:open_vector_format.WorkPlaneLUT)
}

inline void WorkPlaneLUT::SharedCtor() {
workplaneshellposition_ = int64_t{0};
}

WorkPlaneLUT::~WorkPlaneLUT() {
  // @@protoc_insertion_point(destructor:open_vector_format.WorkPlaneLUT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkPlaneLUT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkPlaneLUT::ArenaDtor(void* object) {
  WorkPlaneLUT* _this = reinterpret_cast< WorkPlaneLUT* >(object);
  (void)_this;
}
void WorkPlaneLUT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkPlaneLUT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkPlaneLUT::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.WorkPlaneLUT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vectorblockspositions_.Clear();
  workplaneshellposition_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkPlaneLUT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 workPlaneShellPosition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          workplaneshellposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 vectorBlocksPositions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_vectorblockspositions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_vectorblockspositions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkPlaneLUT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.WorkPlaneLUT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 workPlaneShellPosition = 1;
  if (this->_internal_workplaneshellposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_workplaneshellposition(), target);
  }

  // repeated int64 vectorBlocksPositions = 2;
  {
    int byte_size = _vectorblockspositions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_vectorblockspositions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.WorkPlaneLUT)
  return target;
}

size_t WorkPlaneLUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.WorkPlaneLUT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 vectorBlocksPositions = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->vectorblockspositions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vectorblockspositions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 workPlaneShellPosition = 1;
  if (this->_internal_workplaneshellposition() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_workplaneshellposition());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkPlaneLUT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkPlaneLUT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkPlaneLUT::GetClassData() const { return &_class_data_; }

void WorkPlaneLUT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WorkPlaneLUT *>(to)->MergeFrom(
      static_cast<const WorkPlaneLUT &>(from));
}


void WorkPlaneLUT::MergeFrom(const WorkPlaneLUT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.WorkPlaneLUT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vectorblockspositions_.MergeFrom(from.vectorblockspositions_);
  if (from._internal_workplaneshellposition() != 0) {
    _internal_set_workplaneshellposition(from._internal_workplaneshellposition());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkPlaneLUT::CopyFrom(const WorkPlaneLUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.WorkPlaneLUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkPlaneLUT::IsInitialized() const {
  return true;
}

void WorkPlaneLUT::InternalSwap(WorkPlaneLUT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vectorblockspositions_.InternalSwap(&other->vectorblockspositions_);
  swap(workplaneshellposition_, other->workplaneshellposition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkPlaneLUT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ovf_5flut_2eproto_getter, &descriptor_table_ovf_5flut_2eproto_once,
      file_level_metadata_ovf_5flut_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace open_vector_format
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::open_vector_format::JobLUT* Arena::CreateMaybeMessage< ::open_vector_format::JobLUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::JobLUT >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::WorkPlaneLUT* Arena::CreateMaybeMessage< ::open_vector_format::WorkPlaneLUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::WorkPlaneLUT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
